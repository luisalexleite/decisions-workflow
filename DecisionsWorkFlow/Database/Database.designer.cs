#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações a este ficheiro poderão provocar um comportamento incorrecto e perder-se-ão se
//     o código for regenerado.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DecisionsWorkFlow.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DecisionsWorkFlow")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertattributes(attributes instance);
    partial void Updateattributes(attributes instance);
    partial void Deleteattributes(attributes instance);
    partial void Insertfunctions(functions instance);
    partial void Updatefunctions(functions instance);
    partial void Deletefunctions(functions instance);
    partial void Insertfunctions_attributes(functions_attributes instance);
    partial void Updatefunctions_attributes(functions_attributes instance);
    partial void Deletefunctions_attributes(functions_attributes instance);
    partial void Insertprojects(projects instance);
    partial void Updateprojects(projects instance);
    partial void Deleteprojects(projects instance);
    partial void Insertschools(schools instance);
    partial void Updateschools(schools instance);
    partial void Deleteschools(schools instance);
    partial void Insertstudents(students instance);
    partial void Updatestudents(students instance);
    partial void Deletestudents(students instance);
    partial void Insertstudents_attributes(students_attributes instance);
    partial void Updatestudents_attributes(students_attributes instance);
    partial void Deletestudents_attributes(students_attributes instance);
    partial void Insertusers(users instance);
    partial void Updateusers(users instance);
    partial void Deleteusers(users instance);
    partial void Insertusers_projects(users_projects instance);
    partial void Updateusers_projects(users_projects instance);
    partial void Deleteusers_projects(users_projects instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::DecisionsWorkFlow.Properties.Settings.Default.DecisionsWorkFlowConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<attributes> attributes
		{
			get
			{
				return this.GetTable<attributes>();
			}
		}
		
		public System.Data.Linq.Table<functions> functions
		{
			get
			{
				return this.GetTable<functions>();
			}
		}
		
		public System.Data.Linq.Table<functions_attributes> functions_attributes
		{
			get
			{
				return this.GetTable<functions_attributes>();
			}
		}
		
		public System.Data.Linq.Table<projects> projects
		{
			get
			{
				return this.GetTable<projects>();
			}
		}
		
		public System.Data.Linq.Table<schools> schools
		{
			get
			{
				return this.GetTable<schools>();
			}
		}
		
		public System.Data.Linq.Table<students> students
		{
			get
			{
				return this.GetTable<students>();
			}
		}
		
		public System.Data.Linq.Table<students_attributes> students_attributes
		{
			get
			{
				return this.GetTable<students_attributes>();
			}
		}
		
		public System.Data.Linq.Table<users> users
		{
			get
			{
				return this.GetTable<users>();
			}
		}
		
		public System.Data.Linq.Table<users_projects> users_projects
		{
			get
			{
				return this.GetTable<users_projects>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.attributes")]
	public partial class attributes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _attr_name;
		
		private string _attr_abbr;
		
		private System.Nullable<int> _project_id;
		
		private EntitySet<functions_attributes> _functions_attributes;
		
		private EntitySet<students_attributes> _students_attributes;
		
		private EntityRef<projects> _projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onattr_nameChanging(string value);
    partial void Onattr_nameChanged();
    partial void Onattr_abbrChanging(string value);
    partial void Onattr_abbrChanged();
    partial void Onproject_idChanging(System.Nullable<int> value);
    partial void Onproject_idChanged();
    #endregion
		
		public attributes()
		{
			this._functions_attributes = new EntitySet<functions_attributes>(new Action<functions_attributes>(this.attach_functions_attributes), new Action<functions_attributes>(this.detach_functions_attributes));
			this._students_attributes = new EntitySet<students_attributes>(new Action<students_attributes>(this.attach_students_attributes), new Action<students_attributes>(this.detach_students_attributes));
			this._projects = default(EntityRef<projects>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attr_name", DbType="VarChar(255)")]
		public string attr_name
		{
			get
			{
				return this._attr_name;
			}
			set
			{
				if ((this._attr_name != value))
				{
					this.Onattr_nameChanging(value);
					this.SendPropertyChanging();
					this._attr_name = value;
					this.SendPropertyChanged("attr_name");
					this.Onattr_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attr_abbr", DbType="VarChar(255)")]
		public string attr_abbr
		{
			get
			{
				return this._attr_abbr;
			}
			set
			{
				if ((this._attr_abbr != value))
				{
					this.Onattr_abbrChanging(value);
					this.SendPropertyChanging();
					this._attr_abbr = value;
					this.SendPropertyChanged("attr_abbr");
					this.Onattr_abbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_project_id", DbType="Int")]
		public System.Nullable<int> project_id
		{
			get
			{
				return this._project_id;
			}
			set
			{
				if ((this._project_id != value))
				{
					if (this._projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproject_idChanging(value);
					this.SendPropertyChanging();
					this._project_id = value;
					this.SendPropertyChanged("project_id");
					this.Onproject_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="attributes_functions_attributes", Storage="_functions_attributes", ThisKey="id", OtherKey="attr_id")]
		public EntitySet<functions_attributes> functions_attributes
		{
			get
			{
				return this._functions_attributes;
			}
			set
			{
				this._functions_attributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="attributes_students_attributes", Storage="_students_attributes", ThisKey="id", OtherKey="attr_id")]
		public EntitySet<students_attributes> students_attributes
		{
			get
			{
				return this._students_attributes;
			}
			set
			{
				this._students_attributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="projects_attributes", Storage="_projects", ThisKey="project_id", OtherKey="id", IsForeignKey=true)]
		public projects projects
		{
			get
			{
				return this._projects.Entity;
			}
			set
			{
				projects previousValue = this._projects.Entity;
				if (((previousValue != value) 
							|| (this._projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._projects.Entity = null;
						previousValue.attributes.Remove(this);
					}
					this._projects.Entity = value;
					if ((value != null))
					{
						value.attributes.Add(this);
						this._project_id = value.id;
					}
					else
					{
						this._project_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("projects");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_functions_attributes(functions_attributes entity)
		{
			this.SendPropertyChanging();
			entity.attributes = this;
		}
		
		private void detach_functions_attributes(functions_attributes entity)
		{
			this.SendPropertyChanging();
			entity.attributes = null;
		}
		
		private void attach_students_attributes(students_attributes entity)
		{
			this.SendPropertyChanging();
			entity.attributes = this;
		}
		
		private void detach_students_attributes(students_attributes entity)
		{
			this.SendPropertyChanging();
			entity.attributes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.functions")]
	public partial class functions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _project_id;
		
		private string _func_name;
		
		private string _func_desc;
		
		private bool _weight_set;
		
		private System.DateTime _created_at;
		
		private System.Nullable<System.DateTime> _updated_at;
		
		private EntitySet<functions_attributes> _functions_attributes;
		
		private EntityRef<projects> _projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onproject_idChanging(System.Nullable<int> value);
    partial void Onproject_idChanged();
    partial void Onfunc_nameChanging(string value);
    partial void Onfunc_nameChanged();
    partial void Onfunc_descChanging(string value);
    partial void Onfunc_descChanged();
    partial void Onweight_setChanging(bool value);
    partial void Onweight_setChanged();
    partial void Oncreated_atChanging(System.DateTime value);
    partial void Oncreated_atChanged();
    partial void Onupdated_atChanging(System.Nullable<System.DateTime> value);
    partial void Onupdated_atChanged();
    #endregion
		
		public functions()
		{
			this._functions_attributes = new EntitySet<functions_attributes>(new Action<functions_attributes>(this.attach_functions_attributes), new Action<functions_attributes>(this.detach_functions_attributes));
			this._projects = default(EntityRef<projects>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_project_id", DbType="Int")]
		public System.Nullable<int> project_id
		{
			get
			{
				return this._project_id;
			}
			set
			{
				if ((this._project_id != value))
				{
					if (this._projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproject_idChanging(value);
					this.SendPropertyChanging();
					this._project_id = value;
					this.SendPropertyChanged("project_id");
					this.Onproject_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_func_name", DbType="VarChar(255)")]
		public string func_name
		{
			get
			{
				return this._func_name;
			}
			set
			{
				if ((this._func_name != value))
				{
					this.Onfunc_nameChanging(value);
					this.SendPropertyChanging();
					this._func_name = value;
					this.SendPropertyChanged("func_name");
					this.Onfunc_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_func_desc", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string func_desc
		{
			get
			{
				return this._func_desc;
			}
			set
			{
				if ((this._func_desc != value))
				{
					this.Onfunc_descChanging(value);
					this.SendPropertyChanging();
					this._func_desc = value;
					this.SendPropertyChanged("func_desc");
					this.Onfunc_descChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weight_set", DbType="Bit NOT NULL")]
		public bool weight_set
		{
			get
			{
				return this._weight_set;
			}
			set
			{
				if ((this._weight_set != value))
				{
					this.Onweight_setChanging(value);
					this.SendPropertyChanging();
					this._weight_set = value;
					this.SendPropertyChanged("weight_set");
					this.Onweight_setChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_at", DbType="DateTime NOT NULL")]
		public System.DateTime created_at
		{
			get
			{
				return this._created_at;
			}
			set
			{
				if ((this._created_at != value))
				{
					this.Oncreated_atChanging(value);
					this.SendPropertyChanging();
					this._created_at = value;
					this.SendPropertyChanged("created_at");
					this.Oncreated_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updated_at", DbType="DateTime")]
		public System.Nullable<System.DateTime> updated_at
		{
			get
			{
				return this._updated_at;
			}
			set
			{
				if ((this._updated_at != value))
				{
					this.Onupdated_atChanging(value);
					this.SendPropertyChanging();
					this._updated_at = value;
					this.SendPropertyChanged("updated_at");
					this.Onupdated_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="functions_functions_attributes", Storage="_functions_attributes", ThisKey="id", OtherKey="func_id")]
		public EntitySet<functions_attributes> functions_attributes
		{
			get
			{
				return this._functions_attributes;
			}
			set
			{
				this._functions_attributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="projects_functions", Storage="_projects", ThisKey="project_id", OtherKey="id", IsForeignKey=true)]
		public projects projects
		{
			get
			{
				return this._projects.Entity;
			}
			set
			{
				projects previousValue = this._projects.Entity;
				if (((previousValue != value) 
							|| (this._projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._projects.Entity = null;
						previousValue.functions.Remove(this);
					}
					this._projects.Entity = value;
					if ((value != null))
					{
						value.functions.Add(this);
						this._project_id = value.id;
					}
					else
					{
						this._project_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("projects");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_functions_attributes(functions_attributes entity)
		{
			this.SendPropertyChanging();
			entity.functions = this;
		}
		
		private void detach_functions_attributes(functions_attributes entity)
		{
			this.SendPropertyChanging();
			entity.functions = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.functions_attributes")]
	public partial class functions_attributes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _attr_id;
		
		private System.Nullable<int> _func_id;
		
		private System.Nullable<float> _attr_weight;
		
		private EntityRef<attributes> _attributes;
		
		private EntityRef<functions> _functions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onattr_idChanging(System.Nullable<int> value);
    partial void Onattr_idChanged();
    partial void Onfunc_idChanging(System.Nullable<int> value);
    partial void Onfunc_idChanged();
    partial void Onattr_weightChanging(System.Nullable<float> value);
    partial void Onattr_weightChanged();
    #endregion
		
		public functions_attributes()
		{
			this._attributes = default(EntityRef<attributes>);
			this._functions = default(EntityRef<functions>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attr_id", DbType="Int")]
		public System.Nullable<int> attr_id
		{
			get
			{
				return this._attr_id;
			}
			set
			{
				if ((this._attr_id != value))
				{
					if (this._attributes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onattr_idChanging(value);
					this.SendPropertyChanging();
					this._attr_id = value;
					this.SendPropertyChanged("attr_id");
					this.Onattr_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_func_id", DbType="Int")]
		public System.Nullable<int> func_id
		{
			get
			{
				return this._func_id;
			}
			set
			{
				if ((this._func_id != value))
				{
					if (this._functions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onfunc_idChanging(value);
					this.SendPropertyChanging();
					this._func_id = value;
					this.SendPropertyChanged("func_id");
					this.Onfunc_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attr_weight", DbType="Real")]
		public System.Nullable<float> attr_weight
		{
			get
			{
				return this._attr_weight;
			}
			set
			{
				if ((this._attr_weight != value))
				{
					this.Onattr_weightChanging(value);
					this.SendPropertyChanging();
					this._attr_weight = value;
					this.SendPropertyChanged("attr_weight");
					this.Onattr_weightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="attributes_functions_attributes", Storage="_attributes", ThisKey="attr_id", OtherKey="id", IsForeignKey=true)]
		public attributes attributes
		{
			get
			{
				return this._attributes.Entity;
			}
			set
			{
				attributes previousValue = this._attributes.Entity;
				if (((previousValue != value) 
							|| (this._attributes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._attributes.Entity = null;
						previousValue.functions_attributes.Remove(this);
					}
					this._attributes.Entity = value;
					if ((value != null))
					{
						value.functions_attributes.Add(this);
						this._attr_id = value.id;
					}
					else
					{
						this._attr_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("attributes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="functions_functions_attributes", Storage="_functions", ThisKey="func_id", OtherKey="id", IsForeignKey=true)]
		public functions functions
		{
			get
			{
				return this._functions.Entity;
			}
			set
			{
				functions previousValue = this._functions.Entity;
				if (((previousValue != value) 
							|| (this._functions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._functions.Entity = null;
						previousValue.functions_attributes.Remove(this);
					}
					this._functions.Entity = value;
					if ((value != null))
					{
						value.functions_attributes.Add(this);
						this._func_id = value.id;
					}
					else
					{
						this._func_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("functions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.projects")]
	public partial class projects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _project_name;
		
		private string _project_desc;
		
		private int _project_admin;
		
		private bool _terminated;
		
		private System.DateTime _created_at;
		
		private System.Nullable<System.DateTime> _updated_at;
		
		private EntitySet<attributes> _attributes;
		
		private EntitySet<functions> _functions;
		
		private EntitySet<students> _students;
		
		private EntitySet<users_projects> _users_projects;
		
		private EntityRef<users> _users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onproject_nameChanging(string value);
    partial void Onproject_nameChanged();
    partial void Onproject_descChanging(string value);
    partial void Onproject_descChanged();
    partial void Onproject_adminChanging(int value);
    partial void Onproject_adminChanged();
    partial void OnterminatedChanging(bool value);
    partial void OnterminatedChanged();
    partial void Oncreated_atChanging(System.DateTime value);
    partial void Oncreated_atChanged();
    partial void Onupdated_atChanging(System.Nullable<System.DateTime> value);
    partial void Onupdated_atChanged();
    #endregion
		
		public projects()
		{
			this._attributes = new EntitySet<attributes>(new Action<attributes>(this.attach_attributes), new Action<attributes>(this.detach_attributes));
			this._functions = new EntitySet<functions>(new Action<functions>(this.attach_functions), new Action<functions>(this.detach_functions));
			this._students = new EntitySet<students>(new Action<students>(this.attach_students), new Action<students>(this.detach_students));
			this._users_projects = new EntitySet<users_projects>(new Action<users_projects>(this.attach_users_projects), new Action<users_projects>(this.detach_users_projects));
			this._users = default(EntityRef<users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_project_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string project_name
		{
			get
			{
				return this._project_name;
			}
			set
			{
				if ((this._project_name != value))
				{
					this.Onproject_nameChanging(value);
					this.SendPropertyChanging();
					this._project_name = value;
					this.SendPropertyChanged("project_name");
					this.Onproject_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_project_desc", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string project_desc
		{
			get
			{
				return this._project_desc;
			}
			set
			{
				if ((this._project_desc != value))
				{
					this.Onproject_descChanging(value);
					this.SendPropertyChanging();
					this._project_desc = value;
					this.SendPropertyChanged("project_desc");
					this.Onproject_descChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_project_admin", DbType="Int NOT NULL")]
		public int project_admin
		{
			get
			{
				return this._project_admin;
			}
			set
			{
				if ((this._project_admin != value))
				{
					if (this._users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproject_adminChanging(value);
					this.SendPropertyChanging();
					this._project_admin = value;
					this.SendPropertyChanged("project_admin");
					this.Onproject_adminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_terminated", DbType="Bit NOT NULL")]
		public bool terminated
		{
			get
			{
				return this._terminated;
			}
			set
			{
				if ((this._terminated != value))
				{
					this.OnterminatedChanging(value);
					this.SendPropertyChanging();
					this._terminated = value;
					this.SendPropertyChanged("terminated");
					this.OnterminatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_at", DbType="DateTime NOT NULL")]
		public System.DateTime created_at
		{
			get
			{
				return this._created_at;
			}
			set
			{
				if ((this._created_at != value))
				{
					this.Oncreated_atChanging(value);
					this.SendPropertyChanging();
					this._created_at = value;
					this.SendPropertyChanged("created_at");
					this.Oncreated_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updated_at", DbType="DateTime")]
		public System.Nullable<System.DateTime> updated_at
		{
			get
			{
				return this._updated_at;
			}
			set
			{
				if ((this._updated_at != value))
				{
					this.Onupdated_atChanging(value);
					this.SendPropertyChanging();
					this._updated_at = value;
					this.SendPropertyChanged("updated_at");
					this.Onupdated_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="projects_attributes", Storage="_attributes", ThisKey="id", OtherKey="project_id")]
		public EntitySet<attributes> attributes
		{
			get
			{
				return this._attributes;
			}
			set
			{
				this._attributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="projects_functions", Storage="_functions", ThisKey="id", OtherKey="project_id")]
		public EntitySet<functions> functions
		{
			get
			{
				return this._functions;
			}
			set
			{
				this._functions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="projects_students", Storage="_students", ThisKey="id", OtherKey="project_id")]
		public EntitySet<students> students
		{
			get
			{
				return this._students;
			}
			set
			{
				this._students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="projects_users_projects", Storage="_users_projects", ThisKey="id", OtherKey="project_id")]
		public EntitySet<users_projects> users_projects
		{
			get
			{
				return this._users_projects;
			}
			set
			{
				this._users_projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_projects", Storage="_users", ThisKey="project_admin", OtherKey="id", IsForeignKey=true)]
		public users users
		{
			get
			{
				return this._users.Entity;
			}
			set
			{
				users previousValue = this._users.Entity;
				if (((previousValue != value) 
							|| (this._users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._users.Entity = null;
						previousValue.projects.Remove(this);
					}
					this._users.Entity = value;
					if ((value != null))
					{
						value.projects.Add(this);
						this._project_admin = value.id;
					}
					else
					{
						this._project_admin = default(int);
					}
					this.SendPropertyChanged("users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_attributes(attributes entity)
		{
			this.SendPropertyChanging();
			entity.projects = this;
		}
		
		private void detach_attributes(attributes entity)
		{
			this.SendPropertyChanging();
			entity.projects = null;
		}
		
		private void attach_functions(functions entity)
		{
			this.SendPropertyChanging();
			entity.projects = this;
		}
		
		private void detach_functions(functions entity)
		{
			this.SendPropertyChanging();
			entity.projects = null;
		}
		
		private void attach_students(students entity)
		{
			this.SendPropertyChanging();
			entity.projects = this;
		}
		
		private void detach_students(students entity)
		{
			this.SendPropertyChanging();
			entity.projects = null;
		}
		
		private void attach_users_projects(users_projects entity)
		{
			this.SendPropertyChanging();
			entity.projects = this;
		}
		
		private void detach_users_projects(users_projects entity)
		{
			this.SendPropertyChanging();
			entity.projects = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.schools")]
	public partial class schools : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _school_name;
		
		private string _school_abbr;
		
		private EntitySet<students> _students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onschool_nameChanging(string value);
    partial void Onschool_nameChanged();
    partial void Onschool_abbrChanging(string value);
    partial void Onschool_abbrChanged();
    #endregion
		
		public schools()
		{
			this._students = new EntitySet<students>(new Action<students>(this.attach_students), new Action<students>(this.detach_students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_school_name", DbType="VarChar(255)")]
		public string school_name
		{
			get
			{
				return this._school_name;
			}
			set
			{
				if ((this._school_name != value))
				{
					this.Onschool_nameChanging(value);
					this.SendPropertyChanging();
					this._school_name = value;
					this.SendPropertyChanged("school_name");
					this.Onschool_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_school_abbr", DbType="VarChar(255)")]
		public string school_abbr
		{
			get
			{
				return this._school_abbr;
			}
			set
			{
				if ((this._school_abbr != value))
				{
					this.Onschool_abbrChanging(value);
					this.SendPropertyChanging();
					this._school_abbr = value;
					this.SendPropertyChanged("school_abbr");
					this.Onschool_abbrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="schools_students", Storage="_students", ThisKey="id", OtherKey="school_id")]
		public EntitySet<students> students
		{
			get
			{
				return this._students;
			}
			set
			{
				this._students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_students(students entity)
		{
			this.SendPropertyChanging();
			entity.schools = this;
		}
		
		private void detach_students(students entity)
		{
			this.SendPropertyChanging();
			entity.schools = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.students")]
	public partial class students : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _student_id;
		
		private string _student_name;
		
		private string _national_code;
		
		private System.Nullable<int> _school_id;
		
		private System.Nullable<int> _project_id;
		
		private EntitySet<students_attributes> _students_attributes;
		
		private EntityRef<projects> _projects;
		
		private EntityRef<schools> _schools;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onstudent_idChanging(string value);
    partial void Onstudent_idChanged();
    partial void Onstudent_nameChanging(string value);
    partial void Onstudent_nameChanged();
    partial void Onnational_codeChanging(string value);
    partial void Onnational_codeChanged();
    partial void Onschool_idChanging(System.Nullable<int> value);
    partial void Onschool_idChanged();
    partial void Onproject_idChanging(System.Nullable<int> value);
    partial void Onproject_idChanged();
    #endregion
		
		public students()
		{
			this._students_attributes = new EntitySet<students_attributes>(new Action<students_attributes>(this.attach_students_attributes), new Action<students_attributes>(this.detach_students_attributes));
			this._projects = default(EntityRef<projects>);
			this._schools = default(EntityRef<schools>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_student_id", DbType="VarChar(255)")]
		public string student_id
		{
			get
			{
				return this._student_id;
			}
			set
			{
				if ((this._student_id != value))
				{
					this.Onstudent_idChanging(value);
					this.SendPropertyChanging();
					this._student_id = value;
					this.SendPropertyChanged("student_id");
					this.Onstudent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_student_name", DbType="VarChar(255)")]
		public string student_name
		{
			get
			{
				return this._student_name;
			}
			set
			{
				if ((this._student_name != value))
				{
					this.Onstudent_nameChanging(value);
					this.SendPropertyChanging();
					this._student_name = value;
					this.SendPropertyChanged("student_name");
					this.Onstudent_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_national_code", DbType="VarChar(255)")]
		public string national_code
		{
			get
			{
				return this._national_code;
			}
			set
			{
				if ((this._national_code != value))
				{
					this.Onnational_codeChanging(value);
					this.SendPropertyChanging();
					this._national_code = value;
					this.SendPropertyChanged("national_code");
					this.Onnational_codeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_school_id", DbType="Int")]
		public System.Nullable<int> school_id
		{
			get
			{
				return this._school_id;
			}
			set
			{
				if ((this._school_id != value))
				{
					if (this._schools.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onschool_idChanging(value);
					this.SendPropertyChanging();
					this._school_id = value;
					this.SendPropertyChanged("school_id");
					this.Onschool_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_project_id", DbType="Int")]
		public System.Nullable<int> project_id
		{
			get
			{
				return this._project_id;
			}
			set
			{
				if ((this._project_id != value))
				{
					if (this._projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproject_idChanging(value);
					this.SendPropertyChanging();
					this._project_id = value;
					this.SendPropertyChanged("project_id");
					this.Onproject_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="students_students_attributes", Storage="_students_attributes", ThisKey="id", OtherKey="student_id")]
		public EntitySet<students_attributes> students_attributes
		{
			get
			{
				return this._students_attributes;
			}
			set
			{
				this._students_attributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="projects_students", Storage="_projects", ThisKey="project_id", OtherKey="id", IsForeignKey=true)]
		public projects projects
		{
			get
			{
				return this._projects.Entity;
			}
			set
			{
				projects previousValue = this._projects.Entity;
				if (((previousValue != value) 
							|| (this._projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._projects.Entity = null;
						previousValue.students.Remove(this);
					}
					this._projects.Entity = value;
					if ((value != null))
					{
						value.students.Add(this);
						this._project_id = value.id;
					}
					else
					{
						this._project_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("projects");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="schools_students", Storage="_schools", ThisKey="school_id", OtherKey="id", IsForeignKey=true)]
		public schools schools
		{
			get
			{
				return this._schools.Entity;
			}
			set
			{
				schools previousValue = this._schools.Entity;
				if (((previousValue != value) 
							|| (this._schools.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._schools.Entity = null;
						previousValue.students.Remove(this);
					}
					this._schools.Entity = value;
					if ((value != null))
					{
						value.students.Add(this);
						this._school_id = value.id;
					}
					else
					{
						this._school_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("schools");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_students_attributes(students_attributes entity)
		{
			this.SendPropertyChanging();
			entity.students = this;
		}
		
		private void detach_students_attributes(students_attributes entity)
		{
			this.SendPropertyChanging();
			entity.students = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.students_attributes")]
	public partial class students_attributes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _attr_id;
		
		private System.Nullable<int> _student_id;
		
		private System.Nullable<int> _attr_value;
		
		private EntityRef<attributes> _attributes;
		
		private EntityRef<students> _students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onattr_idChanging(System.Nullable<int> value);
    partial void Onattr_idChanged();
    partial void Onstudent_idChanging(System.Nullable<int> value);
    partial void Onstudent_idChanged();
    partial void Onattr_valueChanging(System.Nullable<int> value);
    partial void Onattr_valueChanged();
    #endregion
		
		public students_attributes()
		{
			this._attributes = default(EntityRef<attributes>);
			this._students = default(EntityRef<students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attr_id", DbType="Int")]
		public System.Nullable<int> attr_id
		{
			get
			{
				return this._attr_id;
			}
			set
			{
				if ((this._attr_id != value))
				{
					if (this._attributes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onattr_idChanging(value);
					this.SendPropertyChanging();
					this._attr_id = value;
					this.SendPropertyChanged("attr_id");
					this.Onattr_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_student_id", DbType="Int")]
		public System.Nullable<int> student_id
		{
			get
			{
				return this._student_id;
			}
			set
			{
				if ((this._student_id != value))
				{
					if (this._students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onstudent_idChanging(value);
					this.SendPropertyChanging();
					this._student_id = value;
					this.SendPropertyChanged("student_id");
					this.Onstudent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attr_value", DbType="Int")]
		public System.Nullable<int> attr_value
		{
			get
			{
				return this._attr_value;
			}
			set
			{
				if ((this._attr_value != value))
				{
					this.Onattr_valueChanging(value);
					this.SendPropertyChanging();
					this._attr_value = value;
					this.SendPropertyChanged("attr_value");
					this.Onattr_valueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="attributes_students_attributes", Storage="_attributes", ThisKey="attr_id", OtherKey="id", IsForeignKey=true)]
		public attributes attributes
		{
			get
			{
				return this._attributes.Entity;
			}
			set
			{
				attributes previousValue = this._attributes.Entity;
				if (((previousValue != value) 
							|| (this._attributes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._attributes.Entity = null;
						previousValue.students_attributes.Remove(this);
					}
					this._attributes.Entity = value;
					if ((value != null))
					{
						value.students_attributes.Add(this);
						this._attr_id = value.id;
					}
					else
					{
						this._attr_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("attributes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="students_students_attributes", Storage="_students", ThisKey="student_id", OtherKey="id", IsForeignKey=true)]
		public students students
		{
			get
			{
				return this._students.Entity;
			}
			set
			{
				students previousValue = this._students.Entity;
				if (((previousValue != value) 
							|| (this._students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._students.Entity = null;
						previousValue.students_attributes.Remove(this);
					}
					this._students.Entity = value;
					if ((value != null))
					{
						value.students_attributes.Add(this);
						this._student_id = value.id;
					}
					else
					{
						this._student_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users")]
	public partial class users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _fname;
		
		private string _lname;
		
		private string _email;
		
		private string _pass;
		
		private bool _terminated;
		
		private System.DateTime _created_at;
		
		private EntitySet<projects> _projects;
		
		private EntitySet<users_projects> _users_projects;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnfnameChanging(string value);
    partial void OnfnameChanged();
    partial void OnlnameChanging(string value);
    partial void OnlnameChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnpassChanging(string value);
    partial void OnpassChanged();
    partial void OnterminatedChanging(bool value);
    partial void OnterminatedChanged();
    partial void Oncreated_atChanging(System.DateTime value);
    partial void Oncreated_atChanged();
    #endregion
		
		public users()
		{
			this._projects = new EntitySet<projects>(new Action<projects>(this.attach_projects), new Action<projects>(this.detach_projects));
			this._users_projects = new EntitySet<users_projects>(new Action<users_projects>(this.attach_users_projects), new Action<users_projects>(this.detach_users_projects));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fname", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string fname
		{
			get
			{
				return this._fname;
			}
			set
			{
				if ((this._fname != value))
				{
					this.OnfnameChanging(value);
					this.SendPropertyChanging();
					this._fname = value;
					this.SendPropertyChanged("fname");
					this.OnfnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lname", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string lname
		{
			get
			{
				return this._lname;
			}
			set
			{
				if ((this._lname != value))
				{
					this.OnlnameChanging(value);
					this.SendPropertyChanging();
					this._lname = value;
					this.SendPropertyChanged("lname");
					this.OnlnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pass", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string pass
		{
			get
			{
				return this._pass;
			}
			set
			{
				if ((this._pass != value))
				{
					this.OnpassChanging(value);
					this.SendPropertyChanging();
					this._pass = value;
					this.SendPropertyChanged("pass");
					this.OnpassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_terminated", DbType="Bit NOT NULL")]
		public bool terminated
		{
			get
			{
				return this._terminated;
			}
			set
			{
				if ((this._terminated != value))
				{
					this.OnterminatedChanging(value);
					this.SendPropertyChanging();
					this._terminated = value;
					this.SendPropertyChanged("terminated");
					this.OnterminatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created_at", DbType="DateTime NOT NULL")]
		public System.DateTime created_at
		{
			get
			{
				return this._created_at;
			}
			set
			{
				if ((this._created_at != value))
				{
					this.Oncreated_atChanging(value);
					this.SendPropertyChanging();
					this._created_at = value;
					this.SendPropertyChanged("created_at");
					this.Oncreated_atChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_projects", Storage="_projects", ThisKey="id", OtherKey="project_admin")]
		public EntitySet<projects> projects
		{
			get
			{
				return this._projects;
			}
			set
			{
				this._projects.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_users_projects", Storage="_users_projects", ThisKey="id", OtherKey="user_id")]
		public EntitySet<users_projects> users_projects
		{
			get
			{
				return this._users_projects;
			}
			set
			{
				this._users_projects.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_projects(projects entity)
		{
			this.SendPropertyChanging();
			entity.users = this;
		}
		
		private void detach_projects(projects entity)
		{
			this.SendPropertyChanging();
			entity.users = null;
		}
		
		private void attach_users_projects(users_projects entity)
		{
			this.SendPropertyChanging();
			entity.users = this;
		}
		
		private void detach_users_projects(users_projects entity)
		{
			this.SendPropertyChanging();
			entity.users = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.users_projects")]
	public partial class users_projects : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _user_id;
		
		private int _project_id;
		
		private EntityRef<projects> _projects;
		
		private EntityRef<users> _users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onuser_idChanging(int value);
    partial void Onuser_idChanged();
    partial void Onproject_idChanging(int value);
    partial void Onproject_idChanged();
    #endregion
		
		public users_projects()
		{
			this._projects = default(EntityRef<projects>);
			this._users = default(EntityRef<users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user_id", DbType="Int NOT NULL")]
		public int user_id
		{
			get
			{
				return this._user_id;
			}
			set
			{
				if ((this._user_id != value))
				{
					if (this._users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser_idChanging(value);
					this.SendPropertyChanging();
					this._user_id = value;
					this.SendPropertyChanged("user_id");
					this.Onuser_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_project_id", DbType="Int NOT NULL")]
		public int project_id
		{
			get
			{
				return this._project_id;
			}
			set
			{
				if ((this._project_id != value))
				{
					if (this._projects.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproject_idChanging(value);
					this.SendPropertyChanging();
					this._project_id = value;
					this.SendPropertyChanged("project_id");
					this.Onproject_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="projects_users_projects", Storage="_projects", ThisKey="project_id", OtherKey="id", IsForeignKey=true)]
		public projects projects
		{
			get
			{
				return this._projects.Entity;
			}
			set
			{
				projects previousValue = this._projects.Entity;
				if (((previousValue != value) 
							|| (this._projects.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._projects.Entity = null;
						previousValue.users_projects.Remove(this);
					}
					this._projects.Entity = value;
					if ((value != null))
					{
						value.users_projects.Add(this);
						this._project_id = value.id;
					}
					else
					{
						this._project_id = default(int);
					}
					this.SendPropertyChanged("projects");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="users_users_projects", Storage="_users", ThisKey="user_id", OtherKey="id", IsForeignKey=true)]
		public users users
		{
			get
			{
				return this._users.Entity;
			}
			set
			{
				users previousValue = this._users.Entity;
				if (((previousValue != value) 
							|| (this._users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._users.Entity = null;
						previousValue.users_projects.Remove(this);
					}
					this._users.Entity = value;
					if ((value != null))
					{
						value.users_projects.Add(this);
						this._user_id = value.id;
					}
					else
					{
						this._user_id = default(int);
					}
					this.SendPropertyChanged("users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
